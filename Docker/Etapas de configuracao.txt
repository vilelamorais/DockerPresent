script "conveniente" para instalação do docker
curl -sSL https://get.docker.com | sh

para resolver o problema de acesso a internet nos container:
incluir no arquivo de configuração do docker a definição do DNS
/etc/default/docker
incluir a linha abaixo
DOCKER_OPTS=" --dns 208.67.222.222 --dns 208.67.220.220"
endereços ip dos DNSs OpenDNS

para salvar uma imagem ajustada
docker commit <container ID> <nomeda image:vesão da imagem>
ex: docker commit vileludo/nginx-ubuntu:1.4

docker ps --filter "status=exited"


#### Dokerfile
Somente um arquivo por diretório

docker build . (representando o diretório do dockerfile)
docker build -t vileludo/apache:1.0 .

### configurações para definição de consumo de hardware


#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
##== Configuração das imagens

Para passar para os memory cards
sudo diskutil umount /dev/disk3s1 && sudo diskutil umount /dev/disk3
sudo dd if=2018-03-13-raspbian-stretch-lite.img of=/dev/disk3

##== Comandos docker

curl -sSL http://get.docker.com | sh

########################
### Acesso

ssh-keygen -t rsa

ssh-copy-id <user>@<machine>

########################
### Comandos Docker

docker swarm init --advertise-addr 192.168.0.20

docker swarm join-token manager

docker swarm join --token SWMTKN-1-0zq5smwvgcvultblczyvuhocevgr8m8iormb5pw4z83yqpobsx-5gv59plnif2bn6hgbdzz69xpj 192.168.168.221:2377

docker swarm join --token SWMTKN-1-0zq5smwvgcvultblczyvuhocevgr8m8iormb5pw4z83yqpobsx-8x17rxj3dht4g1jca8ayf4x30 192.168.168.221:2377

docker service create --name viz --publish 8080:8080/tcp --detach=true --constraint node.role==manager --mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock alexellis2/visualizer-arm:latest

docker service create --replicas 1 --detach=true --name helloworld alpine ping google.com

docker service scale helloworld=10

docker service create --name mynodered -p1880:1880 --replicas 1 --detach=true elzekool/rpi-nodered

docker service scale mynodered=10



###############################################################################
#########==========##########==========##########==========##########=========#



Durante a apresentação sobre o que é o container falar sobre o custo de recursos com o overhead do sistema operacional virtualizado contra a virtualização somente dos recursos utilizados pela aplicação, compartilhando os recursos da máquina hospedeira

O proposito do VMware/hyperv/xen ou qualquer outro hypervisor é o de virtualizar TODO o sistema operacional (máquina, componentes físicos, etc) e o docker é para virtualizar somente os componentes necessários para a aplicação

docker ps -a ==> comando para listar todos os processos mesmo os já finalizados

docker pause|unpause <container>

docker stats <container>

docker top <container>

docker logs <container>

docker rm (-f) <container>

 ----- limitação de consumo de recursos -----

docker run -ti --name <nome> -m <quantidade de memoria>(m|k|g) --cpu-shares

docker run -ti -v <volume>
docker run -ti -v <path no host>:<volume>

docker inspect -f {{.Mounts}} <container>

docker run -d -p 5433:5432 --name pgsql2 --volumes-from dbdados -e POSTGRESQL_USER=docker -e POSTGRE_PASS=docker -e POSTGRESQL_DB=docker kamui/postgresql

LEMBRETE

Dockerfile - sempre com D maiúsculo
